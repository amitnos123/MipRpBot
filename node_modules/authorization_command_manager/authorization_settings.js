const log_writer = require('log_writer');
const constants = require('consts');
const lw = new log_writer(constants.LOG_DIRECTORY_PATH);
const data_manager = require('data_manager');

module.exports = class authorization_settings extends data_manager {

    /**
     * Constructor authorization_settings object
     * @constructor
     * */
    constructor() {
        super('AUTHORIZE_SETTINGS.json');

        this.authSettingsArr = this.load_data();
    }

    /**
     * Create a new authorize setting
     * @param {string} setting - The name of the new setting
     * @returns {void}
     */
    create(setting) {
        if (this.authSettingsArr[setting] !== undefined) {
            const errorMessage = `Authorization setting id='${id}' already exist`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        this.authSettingsArr[setting] = [];


        this.save_data(this.authSettingsArr);
    }

    /**
     * Remove authorize setting
     * @param {string} setting - The name of the setting which will be removed
     * @returns {void}
     */
    remove(setting) {
        if (this.authSettingsArr[setting] === undefined) {
            const errorMessage = `authorization setting '${setting}' doesn't exist`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        delete this.authSettingsArr[setting];

        this.save_data(this.authSettingsArr);
    }

    /**
     * Adding user to authorize setting
     * @param {string} setting - The name of the setting which will be removed
     * @param {string\array(string)} usernameArr - Array of username or single username which will be added to the authorize setting
     * @returns {void}
     */
    add_user(setting, usernameArr) {
        if (this.authSettingsArr[setting] === undefined) {
            const errorMessage = `authorization setting '${setting}' doesn't exist`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        if (Array.isArray(usernameArr)) { // usernameArr is array(GuildMember)
            for (let index = 0; index < usernameArr.length; index++) {
                this.authSettingsArr[setting].push(usernameArr[index]);
            }
        } else { // usernameArr is GuildMember
            this.authSettingsArr[setting].push(username);
        }

        this.save_data(this.authSettingsArr);
    }

    /**
    * Return true or false for, if the member is allowed to use the command based on the member roles\settings in the bot. Root able to do all
    * @param {string} id - id of the command
    * @param {GuildMember} member - The guild member which want to use the command
    * @returns {boolean} - Is the member is allowed to use the command
    */
    is_authorize(id, member) {

        lw.log_message('debug', 'TEST authorization_settings');

        //If member is root, then let the user use the command without checking
        if (this.authSettingsArr[constants.AUTHORIZATION_SETTINGS_ROOT].includes(member.user.username)) {
            lw.log_message('debug', `User ${member.user.username} was authorize because user is root`);
            return true;
        }

        //foreach settings the commands has:    
        //For given setting for the command, will check, if member has it. If found, return true, else continue search until the end
        let memberAllowed = false;
        const authorizationRoles = require('./authorization_roles.js');
        const authRoles = new authorizationRoles();
        const authCommand = authRoles.authDataArr[id];
        const authSettings = this.authSettingsArr; // Can't use 'this' in foreach, because it isn't defined in it

        authCommand.settings.forEach(function (setting) {
            if (authSettings[setting].includes(member.user.username)) {
                lw.log_message('debug', `User ${member.user.username} was authorize because user is ${setting}`);
                memberAllowed = true; //If it's find that the member belong to one of the settings which are allowed to use the command, will turn to true
            }
        });

        if (!memberAllowed) { lw.log_message('debug', `User ${member.user.username} wasn't authorize`); }

        return memberAllowed;
    }
};