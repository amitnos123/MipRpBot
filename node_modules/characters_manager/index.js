const log_writer = require('log_writer');
const constants = require('consts');
const lw = new log_writer(constants.LOG_DIRECTORY_PATH);
const data_manager = require('data_manager');

module.exports = class characters_manager extends data_manager {

    /**
     * Constructor characters_manager object
     * @constructor
    */
    constructor() {
        super('CHARACTERS.json');

        this.dataArr = this.load_data();
    }

    /**
    * Give a single or multiple characters, based on the given chracterName
    * @param {string/Array} chracterName - The chracterName which the character it will return. If given undefined, will return all the charaters.
    * @returns {JSON} - Return all the charaters, if wasn't given chracterName, else will return the item with that chracterName
    */
    get(chracterName) {
        if (chracterName === undefined || chracterName == null) {
            return this.dataArr;
        } else if (Array.isArray(chracterName)) {
            return this.dataArr.filter(function (value, index) {
                if (chracterName.includes(index)) {
                    return true;
                } else {
                    return false;
                }
            });
        } else if (typeof chracterName === 'string') {
            return this.dataArr[chracterName];
        } else {
            const errorMessage = "characters_manager.get was given chracterName which wasn't a string or an array.";
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }
    }

    /**
     * Create and save a character
     * @param {string} chracterName - The character name
     * @param {string} belongUsername - The username of the user which it belong's to
     */
    create(chracterName, belongUsername) {
        if (this.exist(chracterName)) {
            const errorMessage = `chracterName='${chracterName}' already exist`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        this.dataArr[chracterName] = {
            belong: belongUsername
        };

        this.save_data(this.dataArr);
    }


    update(chracterName, characterDataType, data) {
        this.dataArr[chracterName][characterDataType] = data;

        this.save_data(this.dataArr);
    }

    /**
    * Delete a character which has chracterName
    * @param {string} chracterName - The chracterName for the character that will be deleted.
    * @returns {void}
    */
    remove(chracterName) {
        if (!this.exist(chracterName)) {
            const errorMessage = `chracterName='${chracterName}' doesn't exist`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        delete this.dataArr[chracterName];

        this.save_data(this.dataArr);
    }

    /**
    * Return if character exist or not
    * @param {string} chracterName - character name which will check if exist or not
    * @returns {boolean} - If exist or not
    */
    exist(chracterName) {
        if (this.dataArr[chracterName] === undefined) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Return, if the character belongs to the user base on the given username
     * @param {string} chracterName - The character name
     * @param {string} belongUsername - The username of a user
     * @returns {boolean} - If char belongs to the user with that username or not. If char doesn't exist return undefined
     */
    is_character_belong_to_user(chracterName, belongUsername) {
        if (!this.exist(chracterName)) {
            return undefined;
        }

        if (this.dataArr[chracterName].belong === belongUsername) {
            return true;
        } else {
            return false;
        }
    }
};