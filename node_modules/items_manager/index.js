const log_writer = require('log_writer');
const constants = require('consts');
const lw = new log_writer(constants.LOG_DIRECTORY_PATH);
const data_manager = require('data_manager');

module.exports = class items_manager extends data_manager {
    /**
     * @constructor
     */
    constructor() {
        super('ITEMS.json');

        this.dataArr = this.load_data();
    }

    /**
     * Give a single or multiple items, based on the given itemName
     * @param {string/Array} itemName - The itemName which the item it will return. If given undefined, will return all the items.
     * @returns {JSON} - Return all the items, if wasn't given itemName, else will return the item with that itemName
     */
    get(itemName) {
        if (itemName === undefined || itemName == null) {
            return this.dataArr;
        } else if (Array.isArray(itemName)) {
            return this.dataArr.filter(function (value, index) {
                if (itemName.includes(index)) {
                    return true;
                } else {
                    return false;
                }
            });
        } else if (typeof itemName === 'string') {
            return this.dataArr[itemName];
        } else {
            const errorMessage = "items_manager.get was given itemName which wasn't a string or an array.";
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }
    }

    /**
     * Create a new item
     * @param {string} itemName - The itemName of the item which will be created
     */
    create(itemName) {
        if (this.dataArr[itemName] !== undefined) {
            const errorMessage = `itemName='${itemName}' already exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        this.dataArr[itemName] = {
            description: "description"
        };

        this.save_data(this.dataArr);
    }

    /**
     * Update the data on the item for the given itemName
     * @param {string} itemName - The itemName of the item which will be updated
     * @param {string} description - The description which will be saved. Will not change, if the value of the param is undefined
     */
    update(itemName, description) {
        if (this.dataArr[itemName] === undefined) {
            const errorMessage = `itemName='${itemName}' doesn't exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        if (description !== undefined) {
            this.dataArr[itemName].description = description;
        }

        this.save_data(this.dataArr);
    }

    /**
     * Delete the item by itemName
     * @param {string} itemName - The itemName of the item which will be deleted
     */
    remove(itemName) {
        if (this.dataArr[itemName] === undefined) {
            const errorMessage = `itemName='${itemName}' doesn't exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        delete this.dataArr[itemName];

        this.save_data(this.dataArr);
    }

    /**
     * Return if item exist base on the itemName
     * @param {string} itemName - Itemname that will return, if exist or not
     * @returns {boolean} - If item exist or not
     */
    existName(itemName) {
        if (this.dataArr[itemName] !== undefined) {
            return true;
        }
        return false;
    }
};