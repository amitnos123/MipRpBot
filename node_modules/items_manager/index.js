const log_writer = require('log_writer');
const constants = require('consts');
const lw = new log_writer(constants.LOG_DIRECTORY_PATH);
const data_manager = require('data_manager');

module.exports = class items_manager extends data_manager{
    /**
     * @constructor
     */
    constructor() {
        super('ITEMS.json');

        this.dataArr = this.load_data();
    }

    get(itemCode) {
        if(itemCode === undefined || itemCode == null) {
            return this.dataArr;
        } else if(Array.isArray(itemCode)) {
            return this.dataArr.filter(function(value, index) {
                if(itemCode.includes(index)) {
                    return true;
                } else {
                    return false;
                }
            });
        } else if(typeof itemCode === 'string') {
            return this.dataArr[itemCode];
        } else {
            const errorMessage = "items_manager.get was given itemCode which wasn't a string or an array.";
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }
    }

    create(itemCode) {
        if(this.dataArr[itemCode] !== undefined) {
            const errorMessage = `itemCode='${itemCode}' already exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }
        
        this.dataArr[itemCode] = {
            name: "name",
            description: "description",
            quantatiy_allowed: true,
            type: "type"
        };

        this.save_data(this.dataArr);
    }

    update(itemCode, name, description, quantatiy_allowed, type) {
        if(this.dataArr[itemCode] === undefined) {
            const errorMessage = `itemCode='${itemCode}' doesn't exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }

        if(name !== undefined) {
            this.dataArr[itemCode].name = name;
        }

        if(description !== undefined) {
            this.dataArr[itemCode].description = description;
        }

        if(quantatiy_allowed !== undefined) {
            this.dataArr[itemCode].quantatiy_allowed = quantatiy_allowed;
        }

        if(type !== undefined) {
            this.dataArr[itemCode].type = type;
        }
        
        this.save_data(this.dataArr);
    }

    remove(itemCode) {
        if(this.dataArr[itemCode] === undefined) {
            const errorMessage = `itemCode='${itemCode}' doesn't exists`;
            lw.log_message('error', errorMessage);
            throw new Error(errorMessage);
        }
        
        delete this.dataArr[itemCode];

        this.save_data(this.dataArr);
    }
};